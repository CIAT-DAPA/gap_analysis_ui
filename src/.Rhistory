summary(qreg1.2)
broom::tidy(summary(qreg1.2))
summary(qreg1.2) %>% round(., 3)
summary(qreg1.2)
options(scipen = 0.000)
summary(qreg1.2)
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg2$fitted.values, x = bd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg2$fitted.values, x = NFT))
qreg2 <- nlrq(Y ~ SSlinp(NFT, a, b, xs), data = bd, tau = 0.95)
qreg2$fitted.values
qreg2$m
qreg2$m$fitted()
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
qreg2$m$fitted()[1]
qreg2$m$fitted()
qreg1$fitted.values
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  log(qreg1$fitted.values), x = bd$NFT))
#### Regresión de quantiles
regln <- lm(Y ~ log(NFT), data = bd)
#### Regresión de quantiles
regln <- lm(log(Y) ~ NFT, data = bd)
geom_line(aes(y =  regln$fitted.values, x = bd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))+
geom_line(aes(y =  regln$fitted.values, x = bd$NFT))
View(pasivfuma)
#### Regresión de quantiles
regln <- glm(Y ~ NFT, data = bd, family = gaussian(link= "log"))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))+
geom_line(aes(y =  regln$fitted.values, x = bd$NFT))
rqss(Y ~ NFT, data = bd, tau = 0.95)
smqreg1 <- rqss(Y ~ NFT, data = bd, tau = 0.95)
smqreg1$residuals
plot(smqreg1)
smqreg1 <- rqss(Y ~ NFT, data = bd, tau = 0.95)
plot(smqreg1)
smqreg1
smqreg1 <- rqss(Y ~ ss(NFT, lambda = 1), data = bd, tau = 0.95)
smqreg1 <- rqss(Y ~ qss(NFT, lambda = 1), data = bd, tau = 0.95)
smqreg1
plot(smqreg1)
plot(smqreg1)
plot(smqreg1)
smqreg1$coefficients
smqreg1$qss$NFT
smqreg1$qss$NFT[, 1]
plot(smqreg1$qss$NFT$xyz[, 1], smqreg1$qss$NFT$xyz[, 2])
plot(smqreg1$qss$NFT$xyz[, 1], smqreg1$qss$NFT$xyz[, 2], type = "l")
plot(smqreg1$qss$NFT$xyz[, 2], smqreg1$qss$NFT$xyz[, 1], type = "l")
plot(smqreg1)
plot(bd$NFT, bd$Y)
plot(smqreg1, add = T)
plot(bd$NFT, bd$Y)
plot(smqreg1, add = T)
ml1 <- lm(Y ~ poly(NFT, 2) +  azufre, data = bd)
ml1
plot(ml1, add = T)
plot(bd$NFT, bd$Y)
lines(bd$NFT, ml1$fitted.values, col = "red")
ml1$fitted.values
lines(sort(bd$NFT), sort(ml1$fitted.values), col = "red")
plot(bd$NFT, bd$Y)
lines(sort(bd$NFT), sort(ml1$fitted.values), col = "red")
abline(ml1, col = "red")
plot(bd$NFT, bd$Y)
abline(ml1, col = "red")
plot(bd$NFT, ml1$fitted.values, col = "red")
plot(bd$NFT, bd$Y)
lines(bd$NFT, ml1$fitted.values,type = "p", col = "red")
lines(bd$NFT, ml1$fitted.values,type = "p", col = "red", pch = 2)
lines(bd$NFT, ml1$fitted.values,type = "p", col = "red", pch = 6)
lines(bd$NFT, ml1$fitted.values,type = "p", col = "red", pch = 8)
plot(bd$NFT, bd$Y)
lines(bd$NFT, ml1$fitted.values,type = "p", col = "red", pch = 8)
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd, tau = 0.95)
summary(qreg1)
AIC(qreg1)
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))
qreg2 <- nlrq(Y ~ SSpexpf(NFT, a, xs, c), data = bd, tau = 0.95)
qreg2$m$deviance()
AIC(qreg2)
AIC(qreg1)
qreg2 <- nlrq(Y ~ SSpexpf(NFT, a, xs, c), data = bd, tau = 0.95)
AIC(qreg2)
qreg2$m$fitted()
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
qreg2 <- nlrq(Y ~ SSpexpf(log(NFT), a, xs, c), data = bd, tau = 0.95)
qreg2 <- nlrq(Y ~ SSpexpf(jitter(NFT), a, xs, c), data = bd, tau = 0.95)
qreg2 <- nlrq(Y ~ SSpexpf(NFT, a, xs, c), data = bd, tau = 0.95)
qreg2 <- nlrq(Y ~ SSpquad(NFT, a, xs, b, c), data = bd, tau = 0.95)
AIC(qreg2)
AIC(qreg1)
qreg2$m$fitted()
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
qreg2 <- nlrq(Y ~ pquad(NFT, a, xs, b, c), data = bd, tau = 0.95)
qreg2 <- nlrq(Y ~ pquad(NFT, a, xs, b, c), data = bd, tau = 0.95)
qreg2 <- nlrq(Y ~ SSprofd(NFT, a, b, c, d), data = bd, tau = 0.95)
SSprofd(NFT, a, b, c, d)
qreg2 <- nlrq(Y ~ SSprofd(NFT, a, b, c, d), data = bd, tau = 0.95)
qreg2 <- nlrq(Y ~ SSquadp(NFT, a, b, c, xs), data = bd, tau = 0.95)
AIC(qreg2)
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))+
geom_line(aes(y =  regln$fitted.values, x = bd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = bbd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = bd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg2$m$fitted(), x = bd$NFT))
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = bd$NFT))
AIC(qreg2)
AIC(qreg1)
sum1 <- summary(qreg1)
sum2 <- summary(qreg2)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSquadp(NFT, a, b, c, xs), data = bd, tau = 0.95)
sum2 <- summary(qreg2)
qreg2
summary(qreg1)
NFT
bd$NFT
poly(bd$NFT,2 )
qreg2$m$fitted()
qreg2$m$formula()
sum2 <- qreg2$m$
AIC(qreg2)
qreg2$m$rho
qreg2$m$getAllPars()
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd, tau = 0.95)
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
sum2 <- qreg2$m$
AIC(qreg2)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd, tau = 0.95)
sum2 <- qreg2$m$
AIC(qreg2)
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
qreg2
sum2 <- qreg2$m$
AIC(qreg2)
qreg2
qreg2$m$deviance()
deviance(qreg2)
deviance(qreg1)
qreg1
deviance(qreg1)
AIC(qreg2)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd, tau = 0.95)
AIC(qreg2)
AIC(qreg1)
bd_new <- bd %>%
filter(azufre == "ST")
## regresion de quantiles con polionio de grado dos
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd_new, tau = 0.95)
sum1 <- summary(qreg1)
AIC(qreg1)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau = 0.95)
sum2 <- qreg2$m$deviance()
AIC(qreg2)
ggplot(data = bd)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
bd_new <- bd %>%
filter(azufre == "NT")
## regresion de quantiles con polionio de grado dos
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd_new, tau = 0.95)
sum1 <- summary(qreg1)
AIC(qreg1)
## regresion de quantiles con polionio de grado dos
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd_new, tau = 0.95)
sum1 <- summary(qreg1)
AIC(qreg1)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau = 0.95)
sum2 <- qreg2$m$deviance()
AIC(qreg2)
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
bd_new <- bd %>%
filter(azufre == "NT") %>%
mutate(NFT = jitter(NFT))
## regresion de quantiles con polionio de grado dos
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd_new, tau = 0.95)
sum1 <- summary(qreg1)
AIC(qreg1)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau = 0.95)
sum2 <- qreg2$m$deviance()
AIC(qreg2)
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
bd_new %>% View
bd %>%
filter(azufre == "NT") %>%
mutate(NFT = jitter(NFT, amount = 2))
bd_new <- bd %>%
filter(azufre == "NT") %>%
mutate(NFT = abs(jitter(NFT)))
## regresion de quantiles con polionio de grado dos
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd_new, tau = 0.95)
sum1 <- summary(qreg1)
AIC(qreg1)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau = 0.95)
sum2 <- qreg2$m$deviance()
AIC(qreg2)
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT))+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT))
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT), color = "blue")+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT), color = "rojo")
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT), color = "blue")+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT), color = "red")
#creacion de datframe con las metricas de cada modelo para distintos valores de tau
tau <- c( 0.1, 0.5, 0.90)
bd_new <- bd %>%
filter(azufre == "ST") %>%
mutate(NFT = abs(jitter(NFT))) # este comando permite adicionar un pequeño ruido
## regresion de quantiles con polionio de grado dos
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd_new, tau = 0.95)
sum1 <- summary(qreg1)
AIC(qreg1)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau = 0.95)
sum2 <- qreg2$m$deviance()
AIC(qreg2)
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT, colour = azufre))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT), color = "blue")+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT), color = "red")
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT), color = "blue")+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT), color = "red")
AIC(qreg2)
AIC(qreg1)
qreg2$m$getAllPars()
#creacion de datframe con las metricas de cada modelo para distintos valores de tau
tau <- c( 0.1, 0.5, 0.90)
resultados <- data.frame()
for(i in 1:length(tau) ){
cat("Procesando quantil:", tau[i], "\n")
reg <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau =tau[i])
resultados[i,] <- reg$m$getAllPars()
}
resultados
reg <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau =tau[i])
reg
reg$m$getAllPars()
resultados[i,] <- reg$m$getAllPars()
resultados <- list()
for(i in 1:length(tau) ){
cat("Procesando quantil:", tau[i], "\n")
reg <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau =tau[i])
resultados[[i]] <- reg$m$getAllPars()
}
resultados
resultados %>%
bind_rows()
resultados <- resultados %>%
bind_rows() %>%
mutate(quantil = tau)
resultados
#creacion de datframe con las metricas de cada modelo para distintos valores de tau
tau <- c( 0.1, 0.5, 0.90)
resultados <- list()
bd_new
bd_new <- bd %>%
filter(azufre == "ST")
## regresion de quantiles con polionio de grado dos
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd_new, tau = 0.95)
sum1 <- summary(qreg1)
AIC(qreg1)
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau = 0.95)
sum2 <- qreg2$m$getAllPars()
AIC(qreg2)
ggplot(data = bd_new)+
geom_point(aes(y = Y, x = NFT))+
geom_line(aes(y =  qreg1$fitted.values, x = NFT), color = "blue")+
geom_line(aes(y =  qreg2$m$fitted(), x = NFT), color = "red")
#creacion de datframe con las metricas de cada modelo para distintos valores de tau
tau <- c( 0.1, 0.5, 0.90)
resultados <- list()
for(i in 1:length(tau) ){
cat("Procesando quantil:", tau[i], "\n")
reg <- nlrq(Y ~ SSquadp(NFT, a, b, c, xs), data = bd_new, tau =tau[i])
resultados[[i]] <- reg$m$getAllPars()
}
resultados <- resultados %>%
bind_rows() %>%
mutate(quantil = tau)
resultados
resultados
qreg2
resultados
sum1
summary(qreg1)
qreg1$terms
qreg1$model
anova(qreg1)
qreg1
qreg1$x
qreg1$y
qreg1$y
qreg1$residuals
## regresion o linear de quantiles con la transformacion de cuadratica de plateau
qreg2 <- nlrq(Y ~ SSricker(NFT, a, b), data = bd_new, tau = 0.95)
sum2 <- qreg2$m$getAllPars()
AIC(qreg2)
## regresion de quantiles con polionio de grado dos
qreg1 <- rq(Y ~ poly(NFT,2 ), data = bd_new, tau = 0.95)
sum1 <- summary(qreg1)
AIC(qreg1)
AIC(qreg1,qreg2)
nlrq(Y ~ 0, data = bd_new, tau = 0.95)
nlrq(Y ~ , data = bd_new, tau = 0.95)
nlrq(Y  , data = bd_new, tau = 0.95)
nlrq(Y ~ 1 , data = bd_new, tau = 0.95)
nlrq(Y ~ 1 + 1:nrow(bd_new) , data = bd_new, tau = 0.95)
bd_new <- bd %>%
filter(azufre == "ST") %>%
mutate(id = 1:nrow(.))
lm(Y ~ 1, data = bd_new)
formula(Y ~ 1)
nlrq(formula(Y ~ 1) , data = bd_new, tau = 0.95)
nlrq(Y = 1 , data = bd_new, tau = 0.95)
nlrq(Y ~ SSricker(1, a, b) , data = bd_new, tau = 0.95)
nlrq(Y ~ SSricker(rep(1, nrow(bd_new)), a, b) , data = bd_new, tau = 0.95)
resultados
require(raster)
require(tidyverse)
rast <- raster("C:/Users/acmendez/Downloads/gap_richness_common_bean.tif")
object.size(rast)
object.size(rast)/1000000
df <- as.data.frame(rast, xy = T)
object.size(df)/1000000
nrow(df)
4217035*3
965-1014
dnorm(1.96)
?cor.test
NA/1
x <- as.Date("2018-10-01")
months(x)
x <- c(1L, 23L, 4L)
mean(x)
mean(x) %>% is
shiny::runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
version("pacman")
installed.packages(shinydashboardPlus)
installed.packages("shinydashboardPlus")
packageVersion("shinydashboardPlus")
runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
runApp('Z:/gap_analysis_landraces/runs/scripts/others/LGA_dashboard')
TRUE | TRUE
TRUE | FLASE
TRUE | FALSE
2
2
2
22
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
install.packages("starvars")
require(starvars)
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
library(packrat)
packrat::init()
setwd('D:/Gap_analysis_UI/')
packrat::on()
