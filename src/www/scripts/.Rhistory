leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble))
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt, position = "bottomright", pal = pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
dt
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright", pal = ~pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
dt
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble))
ddLegend(data = dt,
position = "bottomright", pal = ~pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
addLegend(data = dt,
position = "bottomright", pal = ~pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
unique(dt$ensemble)
addLegend
attr(pal, "colorType", exact = TRUE)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
pal = ~pal(ensemble),
values = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
attr(pal, "colorType", exact = TRUE)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
colors = ~pal(ensemble),
values = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
pal(dt$ensemble)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
colors = ~pal(unique(ensemble)),
values = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
pal(unique(dt$ensemble))
factor(unique(dt$ensemble)
)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
colors = ~pal(unique(ensemble)),
labels = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(20000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
colors = ~pal(unique(ensemble)),
labels = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
runApp('D:/Gap_analysis_UI')
dt
coordinates(x) <- ~Latitude+Longitude
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
344033.42/2
shiny::runApp('D:/Gap_analysis_UI')
shinyWidgetsGallery()
shiny::runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
Sys.info()
runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
require(maptools)
require(leaflet)
require(leaflet.extras)
leaflet() %>% addStyleEditor()
leaflet() %>%addTiles() %>%addStyleEditor()
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
Sys.getenv("HOME")
Sys.getenv("HOME")
Sys.getenv("HOMEDRIVE")
Sys.getenv()
runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
x <- list()
x$numero
x
runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
ui <- fluidPage(
HTML('<iframe width="560" height="315" src="https://www.youtube.com/embed/T1-k7VYwsHg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>')
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
suppressMessages(if(!require(pacman)){install.packages("pacman");library(pacman)}else{library(pacman)})
pacman::p_load(tcltk, adehabitatHR,   raster, rgdal, doSNOW, sdm, dismo,  rgeos, distances,   sp,
tidyverse, rlang, sf, gdistance, caret, earth, fastcluster, xlsx,  FactoMineR, deldir,
parallelDist, bindrcpp, foreach, doParallel,  pROC, maxnet, usdm)
occ <- read.csv("Z:/gap_analysis_landraces/runs/input_data/by_crop/rice_asia/lvl_1/classification/ice_asia_lvl_1_bd.csv")
occ <- read.csv("Z:/gap_analysis_landraces/runs/input_data/by_crop/rice_asia/lvl_1/classification/rice_asia_lvl_1_bd.csv")
names(occ)
require(magrittr)
occ %<>% dyplr::filter(ensemble == "indica")
occ %<>% dplyr::filter(ensemble == "indica")
xy = occ
xy <- occ
current_clim_layer_generic <- lapply("Z:/gap_analysis_landraces/runs/input_data/generic_rasters/asia", raster) %>% raster::stack()
current_clim_layer_generic <- lapply(list.files("Z:/gap_analysis_landraces/runs/input_data/generic_rasters/asia", pattern =  ".tif$", full.names = T), raster) %>% raster::stack()
occ
varstack <- current_clim_layer_generic
background <- raster::as.data.frame(varstack[[1]], xy = T) %>%
drop_na() %>%
dplyr::select(1:2)
mat        <- cbind(xy, rep(1, nrow(xy)))
head(mat)
names(varstack)
names(xy)
names(xy) %in% names(varstack)
xy[, names(xy) %in% names(varstack)]
head(xy)
mat        <- cbind(xy, rep(1, nrow(xy)))
head(mat)
mat        <- xy[, names(xy) %in% names(varstack)]
head9mat
head(mat)
as.data.frame(cbind(1, raster::extract(varstack, mat[,1:2])))
mat        <- cbind(xy, rep(1, nrow(xy)))
mat %>% dplyr::select(., 1:3, names(xy) %in% names(varstack))
mat %>% dplyr::select(., 1:3, which(names(xy) %in% names(varstack)))
which(names(xy) %in% names(varstack))
head(background)
mat        <-  xy %>% dplyr::select(., 1:3, which(names(xy) %in% names(varstack)))
head(mat)
occ
head(occ)
mod1        <- e1071::svm(mat[, -1], y = NULL, type = "one-classification", nu = 0.5)
mod2       <- e1071::svm(mat[1:(round(nrow(mat)/2,0)), -1], y = NULL, type = "one-classification", nu = nu)
mod2       <- e1071::svm(mat[1:(round(nrow(mat)/2,0)), -1], y = NULL, type = "one-classification", nu = 0.5)
mod2       <- e1071::svm(mat[1:(round(nrow(mat)/4,0)), -1], y = NULL, type = "one-classification", nu = 0.5)
system.tim(mod2       <- e1071::svm(mat[1:(round(nrow(mat)/2,0)), -1], y = NULL, type = "one-classification", nu = nu))
system.time(mod2       <- e1071::svm(mat[1:(round(nrow(mat)/2,0)), -1], y = NULL, type = "one-classification", nu = nu))
system.time(mod2       <- e1071::svm(mat[1:(round(nrow(mat)/2,0)), -1], y = NULL, type = "one-classification", nu = 0.5))
system.tim(mod2       <- e1071::svm(mat[sample(nrow(mat), nrow(mat)/2 ), -1], y = NULL, type = "one-classification", nu = nu))
system.time(mod2       <- e1071::svm(mat[sample(nrow(mat), nrow(mat)/2 ), -1], y = NULL, type = "one-classification", nu = 0.5))
nrow(mat)
sample(nrow(mat), nrow(mat)/2 )
sample(nrow(mat), nrow(mat)/2 ) %>% length
system.time(mod1       <- e1071::svm(mat[, -1], y = NULL, type = "one-classification", nu = 0.5))
135/60
nrow(mat)
system.time(mod3       <- e1071::svm(mat[sample(nrow(mat), nrow(mat)/4 ), ], y = NULL, type = "one-classification", nu = 0.5))
head(mat)
system.time(mod3       <- e1071::svm(mat[sample(nrow(mat), nrow(mat)/4 ), -c(1:3)], y = NULL, type = "one-classification", nu = 0.5))
system.time(mod2       <- e1071::svm(mat[sample(nrow(mat), nrow(mat)/2 ), -c(1:3)], y = NULL, type = "one-classification", nu = 0.5))
system.time(mod1       <- e1071::svm(mat[, -c(1:3)], y = NULL, type = "one-classification", nu = 0.5))
duplicated(mat[, c("Latitude", "Longitude")])
msk <- raster("Z:/gap_analysis_landraces/runs/input_data/mask/mask_asia.tif")
occ$cellID <-NA
occ$cellID <-raster::extract(mask,SpatialPoints(cbind(occ$Longitude, occ$Latitude)),cellnumbers=TRUE)
occ <-occ[!duplicated(occ$cellID),- which(names(occ) %in% c("cellID"))]
occ
occ$cellID <-NA
occ$cellID <-raster::extract(msk,SpatialPoints(cbind(occ$Longitude, occ$Latitude)),cellnumbers=TRUE)
occ <-occ[!duplicated(occ$cellID),- which(names(occ) %in% c("cellID"))]
occ
occ <- read.csv("Z:/gap_analysis_landraces/runs/input_data/by_crop/rice_asia/lvl_1/classification/rice_asia_lvl_1_bd.csv")
occ %<>% dplyr::filter(ensemble == "indica")
occ$cellID <-NA
occ$cellID <-raster::extract(msk,SpatialPoints(cbind(occ$Longitude, occ$Latitude)),cellnumbers=TRUE)
occ <-occ[!duplicated(occ$cellID),- which(names(occ) %in% c("cellID"))]
nrow(occ)
xy <- occ
mat        <-  xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::mutate(pres = 1)
head(mat)
xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::transmute(pres = 1)
xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::transmute(pres = 1, !!!.)
xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::transmute(pres = 1, !!!.) %>% head
xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::mutate(pres = 1) %>% head
xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::transmute(pres = 1, !!!.) %>% nrow()
xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::mutate(pres = 1) %>% nrow()
system.time9mod        <- 1071::svm(mat[, -1], y = NULL, type = "one-classification", nu = 0.5))
system.time(mod        <- 1071::svm(mat[, -1], y = NULL, type = "one-classification", nu = 0.5))
system.time(mod        <- e1071::svm(mat[, -1], y = NULL, type = "one-classification", nu = 0.5))
?across
??across
mat
mat        <-  xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::trasmute(pres = 1, !!!.)
?trasmute
??trasmute
?mutate
mat        <-  xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::transmute(pres = 1, !!!.)
system.time(mod        <- e1071::svm(mat[, -1], y = NULL, type = "one-classification", nu = 0.5))
mod
system.time(proj       <- as.data.frame(cbind(1, raster::extract(varstack, cbind(background)))))
254/60
system.time(x <- raster::extract(varstack, cbind(background)))
cbind(background)
cbind(background) %>5 head
cbind(background) %>% head
system.time(f <- cellFromXY(msk, background))
f[1:10]
f
f %>% length()
plot(msk)
plot(varstack[[1]])
msk
varstack[[1]]
system.time(f <- cellFromXY(varstack[[1]], background))
f
nrow(f)
length(f)
length(varstack[[1]][])
system.time(dfg <- as.data.frame(varstack, xy = T))
head(dfg)
dfg %>% dplyr::mutate(., cellID = 1:nrow(.))
nrow(dfg)
dfg %<>% dplyr::mutate(., cellID = 1:nrow(.))
object.size(dfg)/1000000
dfg2 <- dfg2
dfg2 <- dfg
rm(dfg2)
gc()
head(dfg2)
head(dfg)
dfg %>% dplyr::filter(cellID %in% f) %>% head
dfg %>% dplyr::filter(cellID %in% f) %>% nrow()
nrow(dfg)
system.time(?drop_na()))
?drop_na
system.time( background <- raster::as.data.frame(varstack, xy = T) %>%
dplyr::mutate(cellID = 1:nrow(.)) %>%
drop_na())
gc()
b <- c(10,9,5,12,5,5,7,8)
plot(1:8, b)
abline(h = mean(b))
abline(h = mean(b) - sd(b), col = "red")
abline(h = mean(b) + sd(b), col = "red")
lines(1:8, b)
1/8
(1/8)*100
library(qcc)
p_load(qcc)
qcc(data = b, type = "R")
qcc(data = as.data.frame(b), type = "R")
require(qcc)
?qcc
qcc(b, type="xbar.one")
q <- qcc(b, type="xbar.one")
q$statistics
q$std.dev
sd(b)
q$violations
q <- qcc(b, type="R")
q <- qcc(b, type="S")
q <- qcc(b, type="xbar")
q <- qcc(b, type="p")
q <- qcc(b, type="np")
q <- qcc(b, type="xbar.one", std.dev = "SD")
mean(b)
lines(lm(1:8 ~ b), col = "red")
l <- lm(1:8 ~ b)
l
plot(l)
plot(l)
q <- qcc(b, type="xbar.one", std.dev = "SD")
abline(l)
plot(1:8, b)
abline(l)
mat
head(background)
nrow(background)
table(background$Irrigation)
head(background)
pre
gc()
system.time(background <- raster::as.data.frame(varstack, xy = T) %>%
drop_na())
varstack
system.time(background <- raster::as.data.frame(varstack, xy = T) )
background <- raster::as.data.frame(varstack, xy = T)
raster::as.data.frame(varstack, xy = T)
object.size(varstack)
object.size(varstack)/1000000
lapply(list.files("D:/OneDrive - CGIAR/Documents/prueba/results/common_bean/center_am/input_data/environmental_rasters", pattern =  ".tif$", full.names = T), raster)
current_clim_layer_generic <- lapply(list.files("D:/OneDrive - CGIAR/Documents/prueba/results/common_bean/center_am/input_data/environmental_rasters", pattern =  ".tif$", full.names = T), raster)
varstack <- current_clim_layer_generic
system.time(background <- raster::as.data.frame(varstack, xy = T) %>%
drop_na())
varstack <- current_clim_layer_generic
varstack
varstack <- current_clim_layer_generic %>% raster::stack()
system.time(background <- raster::as.data.frame(varstack, xy = T) %>%
drop_na())
nroe(background)
nrow(background)
predict(mod, background[, -c(1,2)])
3/100
30/100
(30/100)*log(100/30)
(99/100)*log(100/99)
(1/100)*log(100/1)
(1/100)*log(10000/50)
current_clim_layer_generic <- lapply(list.files("Z:/gap_analysis_landraces/runs/input_data/generic_rasters/asia", pattern =  ".tif$", full.names = T), raster)
varstack <- current_clim_layer_generic %>% stack
varstack
system.time(background <- raster::as.data.frame(varstack, xy = T) %>%
drop_na())
flights$vars <- flights$year
vars <- c("year", "month", "day")
data(flights)
p_load(ncyflights13)
p_load(nycflights13)
flights$vars <- flights$year
vars <- c("year", "month", "day")
head(flij)
head(flights)
select(flights, vars)
select(flights, !!vars)
head(background)
mat
nrow(mat)
system.time( pre        <- predict(mod, background[, -c("x", "y")]))
background[, -c("x", "y")]
system.time( pre        <- predict(mod, background[, -c(1, 2)]))
background[, -c(1, 2)] %>% names()
mat %>% names()
mat[, -1] %>% names()
mat[, -1] %>% names()
background[, -c(1, 2)] %>% names()
head( background[, names(background) %in% names(mat[, -1])])
system.time( pre        <- predict(mod, background[, names(background) %in% names(mat[, -1])]))
507/60
nrow(background)
?predict
mod
350/60
508/60
pre[1:10]
which(pre == 0)
which(pre == 0) %>% length
which(pre == TRUE) %>% length
which(pre == FALSE) %>% length
as.numeric(pre)
pre
predict(mod, background[1:20, names(background) %in% names(mat[, -1])], type = "probs")
?predict
predict(mod, background[1:20, names(background) %in% names(mat[, -1])], type = "pr")
predict
getAnywhere(predict)
getAnywhere(predict)[3]
getAnywhere(predict)[2]
standardGeneric("predict")
mod
mod
mod$call
mod$type
mod$kernel
mod$x.scale
mod$residuals
mod$fitted
mod$sigma
mod$SV
absence    <- background[(which(pre == 0)),]
nrow(absence)
presence   <- background[(which(pre != 0)),]
nrow(presence)
nrow(xy)
nrow(mat)
3407*10
# Profiling function
OCSVMprofiling2 <- function(xy, varstack, nu = 0.5){
background <- raster::as.data.frame(varstack, xy = T) %>%
drop_na()
mat        <-  xy %>% dplyr::select(., which(names(xy) %in% names(varstack))) %>%
dplyr::transmute(pres = 1, !!!.)
#mat        <- xy[, names(xy) %in% names(varstack)]
#mat        <- as.data.frame(cbind(1, raster::extract(varstack, mat[,1:2])))
mod        <- e1071::svm(mat[, -1], y = NULL, type = "one-classification", nu = nu)
#proj       <- as.data.frame(cbind(1, raster::extract(varstack, cbind(background))))
pre        <- predict(mod, background[, names(background) %in% names(mat[, -1])])
absence    <- background[(which(pre == 0)),]
presence   <- background[(which(pre != 0)),]
gc()
return(list(Absences = absence, Presences = presence))
}
res1 <- OCSVMprofiling2(xy = oc.curves.xbar(), varstack, nu = 0.5)
gc()
occ %>% nrow()
head(occ)
system.time(res1 <- OCSVMprofiling2(xy = occ, varstack = current_clim_layer_generic %>% raster::stack(), nu = 0.5))
556/60
OCSVMprofiling2 <- function(xy, varstack, nu = 0.5){
background <- raster::as.data.frame(varstack[[1]], xy = T) %>%
drop_na() %>%
dplyr::select(1:2)
bioclim    <- varstack
coo        <- background
mat        <- cbind(xy, rep(1, nrow(xy)))
mat        <- as.data.frame(cbind(1, raster::extract(bioclim, mat[,1:2])))
mod        <- e1071::svm(mat[, -1], y = NULL, type = "one-classification", nu = nu)
proj       <- as.data.frame(cbind(1, raster::extract(bioclim, cbind(coo))))
pre        <- predict(mod, proj[, -1])
absence    <- coo[(which(pre == 0)),]
presence   <- coo[(which(pre != 0)),]
return(list(Absences = absence, Presences = presence))
}
system.time(res1 <- OCSVMprofiling2(xy = unique(occ[,c("Longitude","Latitude")]), varstack = current_clim_layer_generic %>% raster::stack()))
816/60
head(res1)
head(res1)
is(res1)
head(res1$Absences)
head(res1$Presences)
mod$probA
mod$decision.values
mod$na.action
